name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  check_master:
    name: Check Master
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check if branch is up to date with target branch
        run: |
          git fetch origin main
          if [ "$(git rev-parse HEAD)" != "$(git rev-parse @{u})" ]; then
            echo "Branch is not up to date with main."
            exit 1
          fi

  lint_test:
    name: Lint Test
    runs-on: ubuntu-latest
    needs: check_master

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install
        working-directory: ./react-app

      - name: Run Lint
        run: npm run lint
        working-directory: ./react-app

  build_application:
    name: Build Application
    runs-on: ubuntu-latest
    needs: check_master

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install
        working-directory: ./react-app

      - name: Build React app
        run: npm run build
        working-directory: ./react-app

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'

      - name: Install Composer dependencies
        run: composer install
        working-directory: ./laravel-app

      - name: Build Laravel app
        run: php artisan build
        working-directory: ./laravel-app

  unit_test:
    name: Unit Test
    runs-on: ubuntu-latest
    needs: [lint_test, build_application]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run React unit tests
        run: npm test
        working-directory: ./react-app

      - name: Run Laravel unit tests
        run: php artisan test
        working-directory: ./laravel-app

  load_test:
    name: Load Test
    runs-on: ubuntu-latest
    needs: [lint_test, build_application]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run Load Tests
        run: ./load-test-script.sh

  sast:
    name: Static Application Security Testing (SAST)
    runs-on: ubuntu-latest
    needs: [unit_test, load_test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run SAST
        run: npm run sast
        working-directory: ./react-app

  dast:
    name: Dynamic Application Security Testing (DAST)
    runs-on: ubuntu-latest
    needs: [unit_test, load_test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run DAST
        run: npm run dast
        working-directory: ./react-app

  build_image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [sast, dast]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/react-app:latest ./react-app
          docker build -t ${{ secrets.DOCKER_USERNAME }}/laravel-app:latest ./laravel-app

  push_image:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: build_image

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/react-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/laravel-app:latest

  scan_image:
    name: Scan Docker Image
    runs-on: ubuntu-latest
    needs: push_image

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Scan Docker image
        run: docker scan ${{ secrets.DOCKER_USERNAME }}/react-app:latest

  notify_cd:
    name: Notify CD
    runs-on: ubuntu-latest
    needs: scan_image

    steps:
      - name: Trigger ArgoCD Sync
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
